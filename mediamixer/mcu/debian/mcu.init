#! /usr/bin/env bash

### BEGIN INIT INFO
# Provides:          mcu
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start/stop Medooze MCU MediaMixer
# Description:       start/stop Medooze MCU MediaMixer
### END INIT INFO


# NAME affects the PID file and log file names. The configuration file under /etc/default/
# must also be called $NAME (otherwise it is not loaded).
NAME=mcu
DESC="Medooze MCU MediaMixer"
HOME_DIR=/var/run/$NAME

# Those may be overriden in /etc/defaul/$NAME.
DAEMON=mcu
RUN=no
LOG_DIR=/var/log/$NAME


# Load configuration.
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load system LSB functions.
. /lib/lsb/init-functions

# Debian LSB functions don't add \n in function log_begin_msg().
# In Ubuntu such function is overriden in /etc/lsb-base-logging.sh.
UBUNTU_LOGGING=0
[ -r /etc/lsb-base-logging.sh ] && UBUNTU_LOGGING=1

if [ "$1" != "stop" ] && [ "$1" != "status" ] ; then
  # Ensure that RUN=yes in /etc/default/$NAME file.
  if [ "$RUN" != "yes" ] ; then
    log_failure_msg "$DESC ($NAME) not yet configured, set RUN=yes in /etc/default/$NAME"
    exit 0
  fi
fi

# Check whether the MCU daemon exists and it is executable.
if [ ! -x "$DAEMON" ] ; then
  log_failure_msg "$DESC ($NAME): daemon '$DAEMON' not found or not executable."

  case "$1" in
  status)
    # LSB - 4: program or service status is unknown.
    log_end_msg 4
    exit 4
    ;;
  stop)
    exit 0
    ;;
  *)
    # LSB - 5: program is not installed.
    log_end_msg 5
    exit 5
    ;;
  esac
fi

PIDFILE="${HOME_DIR}/${NAME}.pid"
OPTIONS="-f --mcu-pid ${PIDFILE}"

if [ "$DEBUG" == "yes" ]     ; then  OPTIONS="$OPTIONS -d"                                ; fi
if [ -n "$LOG_DIR"  ]        ; then  OPTIONS="$OPTIONS --mcu-log $LOG_DIR/$NAME.log"      ; fi
if [ -n "$TLS_CRT" ]         ; then  OPTIONS="$OPTIONS --mcu-crt $TLS_CRT"                ; fi
if [ -n "$TLS_KEY" ]         ; then  OPTIONS="$OPTIONS --mcu-key $TLS_KEY"                ; fi
if [ -n "$XMLRPC_IP" ]       ; then  OPTIONS="$OPTIONS --http-ip $XMLRPC_IP"              ; fi
if [ -n "$XMLRPC_PORT" ]     ; then  OPTIONS="$OPTIONS --http-port $XMLRPC_PORT"          ; fi
if [ -n "$RTP_MIN_PORT" ]    ; then  OPTIONS="$OPTIONS --min-rtp-port $RTP_MIN_PORT"      ; fi
if [ -n "$RTP_MAX_PORT" ]    ; then  OPTIONS="$OPTIONS --max-rtp-port $RTP_MAX_PORT"      ; fi
if [ -n "$RTMP_PORT" ]       ; then  OPTIONS="$OPTIONS --rtmp-port $RTMP_PORT"            ; fi
if [ -n "$WEBSOCKET_PORT" ]  ; then  OPTIONS="$OPTIONS --websocket-port $WEBSOCKET_PORT"  ; fi
if [ -n "$VAD_PERIOD" ]      ; then  OPTIONS="$OPTIONS --vad-period $VAD_PERIOD"          ; fi


# Create HOME_DIR directory in case it doesn't exist.
# Useful in Ubuntu as /var/run/ content is deleted in shutdown.
check_homedir()
{
  if [ ! -d $HOME_DIR ] ; then mkdir $HOME_DIR ; fi
}


# Create LOG_DIR directory in case it doesn't exist.
check_logdir()
{
  if [ ! -d $LOG_DIR ] ; then mkdir $LOG_DIR ; fi
}


# Return values:
# - 3: not running.
# - 0: running.
# - 1: not running but PID file exists.
get_status() {
  if [ ! -r "$PIDFILE" ]; then
    return 3
  fi

  read pid < "$PIDFILE"

  # Empty PID file. Annoying.
  if [ "$pid" == "" ] ; then
    return 3
  fi

  if ps -p "$pid" > /dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}


# Return values:
# - 0: running.
# - 1: failed to start.
start() {
  set -e
  check_homedir
  check_logdir
  set +e

  get_status
  case $? in
    0)  # Already running, do nothing.
      log_warning_msg "already running."
      return 0
      ;;
    3)  # Not running, start it.
      ;;
    1)  # Not running but PID file exists, remove it and start.
      log_warning_msg "not running but PID file '$PIDFILE' exists, deleting it."
      rm $PIDFILE
      ;;
  esac

  # Generate core dumps (TODO: set core path and format).
  ulimit -c unlimited

  start-stop-daemon --start --quiet --pidfile $PIDFILE --chdir $LOG_DIR --exec $DAEMON -- $OPTIONS
  res=$?

  if [ $res -eq 0 ] ; then
    return 0
  else
    if [ ! -r "$PIDFILE" ]; then
      log_failure_msg "error, failed to start."
      return 1
    else
      log_failure_msg "error, failed to start (and PID file '$PIDFILE' exists)."
      return 1
    fi
  fi
}


# Return values:
# - 0: stopped.
# - 1: was not running.
stop() {
  get_status
  case $? in
    0)  # Running.
      # Kill with SIGKILL the children so the parent also dies.
      kill -9 $pid
      # The MCU does not remove the PID file.
      rm $PIDFILE 2>/dev/null
      return 0
      ;;
    1|3)  # Not running.
      return 1
      ;;
  esac
}


case "$1" in

  start)
    log_daemon_msg "Starting $DESC ($NAME)"
    echo

    start
    case $? in
      0)  # Running.
        log_end_msg 0
        exit 0
        ;;
      1)
        log_end_msg 1
        exit 1
        ;;
    esac
    ;;

  stop)
    log_daemon_msg "Stopping $DESC ($NAME)"
    echo

    stop
    case $? in
      0)  # Stopped.
        log_end_msg 0
        exit 0
        ;;
      1)  # Was not running.
        log_warning_msg "$DESC ($NAME) is not running."
        log_end_msg 0
        exit 0
        ;;
    esac
    ;;

  restart|force-reload)
    log_daemon_msg "Restarting $DESC ($NAME)"
    echo

    stop
    sleep 1
    start
    case $? in
      0)  # Running.
        log_end_msg 0
        exit 0
        ;;
      1)
        log_end_msg 1
        exit 1
        ;;
    esac
    ;;

  status)
    set +e
    get_status
    case $? in
      3)  # Not running.
        log_begin_msg "$DESC ($NAME) is not running."
        [ $UBUNTU_LOGGING -eq 0 ] && echo
        exit 3
        ;;
      0)  # Running.
        log_begin_msg "$DESC ($NAME) is running."
        [ $UBUNTU_LOGGING -eq 0 ] && echo
        exit 0
        ;;
      1)  # Not running but PID file exists.
        log_warning_msg "$DESC ($NAME) is not running but PID file '$PIDFILE' exists."
        exit 1
        ;;
    esac
    ;;

  *)
    log_failure_msg "Usage: /etc/init.d/$NAME {start|stop|restart|force-reload|status}."
    exit 1
    ;;

esac
