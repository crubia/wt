#!/bin/bash
#
# Start up the network playground on a boot2docker instance, assuming
# that "build.sh" has already been run in this directory to build the
# Docker images..
#El pull de las imagenes se realiza de forma manual.

#Preparamos el entorno y verificamos que las herramientas se encuentran disponibles.
if [ ! -x /sbin/brctl ]
then
    sudo yum -y install bridge-utils
fi

sudo mkdir -p /var/run/netns

start_container () {
    hostname=$1
    image=$2
    port=$3
    container=${hostname%%.*}

    pid=$(docker inspect -f '{{.State.Pid}}' $container 2>/dev/null || true)

    if [ "$pid" = "" ]
    then
        if [ -n "$port" ]
        then netopts="--publish=$port:22"
        else netopts="--net=none"
        fi
        case $container in
                mysql) netopts=$netopts" --publish=3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /home/core/mysql/my.conf:/etc/mysql/my.conf -v /home/core/mysql/dataDir:/var/lib/mysql"
                ;;
                dnslan) netopts=$netopts" -v /home/core/dnsmasq/lan.dnsmasq.conf:/etc/dnsmasq.conf -v /home/core/dnsmasq/hosts:/etc/dnsmasq.d/hosts " 
                ;;
                core) netopts=$netopts" -v /home/core/kamailio/core.cfg:/etc/kamailio/kamailio.cfg "
                ;;
                mcu) netopts=$netopts" -v /home/core/medooze-mcu/domain.xml:/usr/local/sailfin/domains/domain1/config/domain.xml "
                ;;
        esac
        docker run --name=$container --hostname=$hostname --dns=192.168.100.205 --dns-search=lan.unifiedcom.org $netopts -i -d $image 

    elif [ "$pid" = "0" ]
    then
        docker start $container  >/dev/null
    else
        return
    fi

    pid=$(docker inspect -f '{{.State.Pid}}' $container)
    sudo rm -f /var/run/netns/$container
    sudo ln -s /proc/$pid/ns/net /var/run/netns/$container

    echo Container started: $container
}


# These commands are each a no-op if the command has already run.

start_bridge () {               # args: BRIDGE_NAME
    sudo brctl addbr $1 &>/dev/null
    sudo ip link set $1 up
    echo Created bridge: $1
}
give_interface_to_container () { # args: OLD_NAME CONTAINER NEW_NAME
    sudo ip link set $1 netns $2
    sudo ip netns exec $2 ip link set dev $1 name $3
    sudo ip netns exec $2 ip link set $3 up
}
create_interface () {
    #
    # Given an interface name "www-eth0", create both an interface with
    # that name and also a peer that is connected to it.  Place the peer
    # in the container "www" and give it the name "eth0" there.
    #
    interface=$1
    container=${interface%%-*}
    short_name=${interface##*-}
    sudo ip link add $interface type veth peer name P &>/dev/null
    give_interface_to_container P $container $short_name
    echo Created interface: $interface
}


create_point_to_point () {
    #
    # Given arguments "backbone eth0 isp eth1", create a pair of peer
    # interfaces and put one inside the container "backbone" and name it
    # "eth0" and the other inside of "isp" with the name "eth1".
    #
    sudo ip netns exec $1 ip link set $2 up &>/dev/null
    sudo ip link add P type veth peer name Q
    give_interface_to_container P $1 $2
    give_interface_to_container Q $3 $4
    echo Created link between: $1 $3
}
bridge_add_interface () {
    bridge=$1
    interface=$2
    sudo brctl addif $bridge $interface &>/dev/null
    sudo ip link set dev $interface up
    echo Bridged interface: $interface
}

